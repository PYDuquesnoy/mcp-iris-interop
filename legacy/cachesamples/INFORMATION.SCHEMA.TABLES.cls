/* Copyright (c) 2025 by InterSystems Corporation.
   Cambridge, Massachusetts, U.S.A.  All rights reserved.
   Confidential property of InterSystems Corporation. */

/// Returns one row for each table in the current namespace for which the current user has privileges.
Class INFORMATION.SCHEMA.TABLES Extends %Library.Persistent [ ClassType = persistent, Final, Owner = {_PUBLIC}, SqlRowIdPrivate, SqlTableName = TABLES, StorageStrategy = SQLStorage, System = 4 ]
{

Parameter READONLY = 1;

Index IDKeyIndex On (SchemaExact, TableExact) [ IdKey, Internal, Unique ];

Property SchemaExact As %String(MAXLEN = 128) [ Internal, Private, Required, SqlColumnNumber = 20 ];

Property TableExact As %String(MAXLEN = 128) [ Internal, Private, Required, SqlColumnNumber = 21 ];

/// Is the table a system table (1 or 0)
Property SystemTable As %Integer [ Calculated, Internal, Private, Required, SqlColumnNumber = 22, SqlComputeCode = { set {*}=$s($e({TABLE_SCHEMA})="%"||({TABLE_SCHEMA}="INFORMATION_SCHEMA"):1,1:0) }, SqlComputed ];

/// Table qualifier - always NULL in InterSystems IRIS.
Property TABLECATALOG As %String(MAXLEN = 128) [ Calculated, SqlColumnNumber = 2, SqlComputeCode = { set {*}=""}, SqlComputed, SqlFieldName = TABLE_CATALOG ];

/// Name of schema that contains the table.
Property TABLESCHEMA As %String(COLLATION = "Upper", MAXLEN = 128) [ Required, SqlColumnNumber = 3, SqlFieldName = TABLE_SCHEMA ];

/// Name of the table.
Property TABLENAME As %String(COLLATION = "Upper", MAXLEN = 128) [ Required, SqlColumnNumber = 4, SqlFieldName = TABLE_NAME ];

/// The values of TABLE_TYPE have the following meanings:
/// <br>
/// <ul>
/// 	<li>BASE TABLE - The table being described is a persistent base table.</li>
/// 	<li>SYSTEM TABLE - The table being described is a system persistent base table.</li>
/// 	<li>FOREIGN TABLE - The table being described is a foreign table, projecting data external to IRIS.</li>
/// 	<li>VIEW - The table being described is a viewed table.</li>
/// 	<li>SYSTEM VIEW - The table being described is a viewed table.</li>
/// 	<li>GLOBAL TEMPORARY - The table being described is a global temporary table.</li>
/// 	<li>LOCAL TEMPORARY - The table being described is a created local temporary table.</li>
/// </ul>
Property TABLETYPE As %String(COLLATION = "SqlUpper", MAXLEN = 16, VALUELIST = ",BASE TABLE,VIEW,GLOBAL TEMPORARY,LOCAL TEMPORARY,SYSTEM TABLE,SYSTEM VIEW,FOREIGN TABLE") [ Required, SqlColumnNumber = 5, SqlFieldName = TABLE_TYPE ];

/// From the standard:
/// <br>
/// <i><pre>	The value of SELF_REFERENCING_COLUMN_NAME is the name of the self-referencing column of the table, if the table is a typed table. 
/// 		Otherwise, the value of SELF_REFERENCING_COLUMN_NAME is the null value.</pre></i>
/// Since InterSystems IRIS does not currently support typed table (see IS_TYPED), SELF_REFERENCING_COLUMN_NAME is always NULL
Property SELFREFERENCINGCOLUMNNAME As %String(MAXLEN = 3) [ Calculated, SqlColumnNumber = 6, SqlComputeCode = { set {*}="" }, SqlComputed, SqlFieldName = SELF_REFERENCING_COLUMN_NAME ];

/// From the Standard:
/// <br>
/// <i><pre>	The values of REFERENCE_GENERATION have the following meanings:
/// 		SYSTEM GENERATED - The values of the self-referencing column of the table are generated by the SQL-server.
/// 		USER GENERATED   - The values of the self-referencing column of the table are generated by the user.
/// 		DERIVED          - The values of the self-referencing column of the table are generated from columns of the table.
/// 		null             - The table being described does not have a self-referencing column.</pre></i>
/// Since InterSystems IRIS does not support self-referencing columns, REFERENCE_GENERATION is always null.
Property REFERENCEGENERATION As %String(MAXLEN = 16, VALUELIST = ",SYSTEM GENERATED,USER GENERATED,DERIVED") [ Calculated, SqlColumnNumber = 7, SqlComputeCode = { set {*}="" }, SqlComputed, SqlFieldName = REFERENCE_GENERATION ];

/// From the standard:
/// <br>
/// <i><pre>	If the table being described is a table of a structured type TY, then the values of USER_DEFINED_TYPE_CATALOG, USER_DEFINED_TYPE_SCHEMA, and USER_DEFINED_TYPE_NAME 
/// 	are the fully qualified name of TY; otherwise, the values of USER_DEFINED_TYPE_CATALOG, USER_DEFINED_TYPE_SCHEMA, and USER_DEFINED_TYPE_NAME are the null value.</pre></i>
/// For InterSystems IRIS, USER_DEFINED_TYPE_CATALOG is always NULL.
Property USERDEFINEDTYPECATALOG As %String(MAXLEN = 3) [ Calculated, SqlColumnNumber = 8, SqlComputeCode = { set {*}="" }, SqlComputed, SqlFieldName = USER_DEFINED_TYPE_CATALOG ];

/// For InterSystems IRIS, USER_DEFINED_TYPE_SCHEMA is always NULL.
Property USERDEFINEDTYPESCHEMA As %String(MAXLEN = 3) [ Calculated, SqlColumnNumber = 9, SqlComputeCode = { set {*}="" }, SqlComputed, SqlFieldName = USER_DEFINED_TYPE_SCHEMA ];

/// For InterSystems IRIS, USER_DEFINED_TYPE_NAME is always NULL.
Property USERDEFINEDTYPENAME As %String(MAXLEN = 3) [ Calculated, SqlColumnNumber = 10, SqlComputeCode = { set {*}="" }, SqlComputed, SqlFieldName = USER_DEFINED_TYPE_NAME ];

/// The values of IS_INSERTABLE_INTO have the following meanings:
/// <br>
/// <ul>
/// 	<li>YES - The table being described is insertable-into.</li>
/// 	<li>NO - The table being described is not insertable-into.</li>
/// </ul>
Property ISINSERTABLEINTO As %String(MAXLEN = 3) [ Calculated, Required, SqlColumnNumber = 11, SqlComputeCode = {new tExtent
	set tExtent=$lg($g(^rINDEXSQL("rv",$zconvert({TABLE_SCHEMA},"U"),$zconvert({TABLE_NAME},"U"))),2)
	if tExtent="" set {*}="NO" QUIT
	if {TABLE_TYPE}="VIEW" { set {*}=$s($lg(^oddEXTR(tExtent,91),30)=1:"YES",1:"NO") }
	else { set {*}=$s($lg(^oddEXTR(tExtent,91),7)="Y":"NO",1:"YES") }
}, SqlComputed, SqlFieldName = IS_INSERTABLE_INTO ];

/// From the standard:
/// <br>
/// <i><pre>	A table RT whose row type is derived from a structured type ST is called a typed table. Only a base table or a view can be a typed table. 
/// 	A typed table has columns corresponding, in name and declared type, to every attribute of ST and one other column REFC that is the self-referencing column of RT; 
/// 	let REFCN be the <column name> of REFC. The declared type of REFC is necessarily REF(ST) and the nullability characteristic of REFC is known not nullable. 
/// 	If RT is a base table, then the table constraint "UNIQUE(REFCN)" is implicit in the definition of RT. A typed table is called a referenceable table. 
/// 	A self-referencing column cannot be updated. Its value is determined during the insertion of a row into the referenceable table. 
/// 	The value of a system-generated self-referencing column and a derived self-referencing column is automatically generated when the row is inserted into the referenceable table. 
/// 	The value of a user-generated self-referencing column is supplied as part of the candidate row to be inserted into the referenceable table.</pre></i>
///  InterSystems IRIS does not currently support typed tables, therefore IS_TYPED is always NO.
Property ISTYPED As %String(MAXLEN = 3) [ Calculated, SqlColumnNumber = 12, SqlComputeCode = { set {*}="NO" }, SqlComputed, SqlFieldName = IS_TYPED ];

/// Name of the class that projected this table
Property Classname As %String(MAXLEN = 254) [ Calculated, SqlColumnNumber = 13, SqlComputeCode = { set {*}=$lg($g(^rINDEXSQL("rv",$zconvert({TABLE_SCHEMA},"U"),$zconvert({TABLE_NAME},"U"))),1) }, SqlComputed, SqlFieldName = CLASSNAME ];

/// Table's description
Property Description As %String(MAXLEN = 254) [ Calculated, SqlColumnNumber = 14, SqlComputeCode = { set {*}=$lg($g(^rINDEXSQL("TABLE",{SchemaExact},{TableExact})),5) }, SqlComputed, SqlFieldName = DESCRIPTION ];

/// Table's owner
Property Owner As %String(MAXLEN = 254) [ Calculated, SqlColumnNumber = 15, SqlComputeCode = { set {*}=$lg($g(^rINDEXSQL("rv",$zconvert({TABLE_SCHEMA},"U"),$zconvert({TABLE_NAME},"U"))),6) }, SqlComputed, SqlFieldName = OWNER ];

Property ISSHARDED As %String(MAXLEN = 3) [ Calculated, SqlColumnNumber = 16, SqlComputeCode = { new tExtent
	set tExtent=$lg($g(^rINDEXSQL("rv",$zconvert({TABLE_SCHEMA},"U"),$zconvert({TABLE_NAME},"U"))),2)
	if tExtent="" { set {*}="NO" QUIT }
	if {TABLE_TYPE}="VIEW" { set {*}="NO" }
	else { set {*}=$s($lg(^oddEXTR(tExtent,91),27):"YES",1:"NO") }}, SqlComputed, SqlFieldName = IS_SHARDED ];

Storage SQLStorage
{
<ExtentSize>100000</ExtentSize>
<SQLMap name="Master">
<Data name="TABLE_NAME">
<Piece>3</Piece>
</Data>
<Data name="TABLE_SCHEMA">
<Piece>2</Piece>
</Data>
<Data name="TABLE_TYPE">
<RetrievalCode> new tType set tType=$lg(^oddSQL({L1},{L2}),4),{TABLE_TYPE}=$s($e({L1})="%":$s(tType["TABLE":"SYSTEM TABLE",1:"SYSTEM VIEW"),{L1}="INFORMATION_SCHEMA":"SYSTEM TABLE",1:$case(tType,"TABLE":"BASE TABLE","SYSTEM TABLE":"BASE TABLE",:tType))</RetrievalCode>
</Data>
<Global>^oddSQL</Global>
<PopulationType>full</PopulationType>
<Subscript name="1">
<Expression>{SchemaExact}</Expression>
<Invalidcondition name="1">
<Expression>$e({L1},1,10)="IRIS_Shard"||($e({L1},1,20)="IRIS_MasterFederated")||($e({L1},1,14)="IRIS_Federated")</Expression>
</Invalidcondition>
<NextCode>set {L1} = $$GetNextSubscript^%SYS.SQLSEC("^oddSQL", {L1}) quit:{L1}=""
	goto:($e({L1},1,10)="IRIS_Shard"||($e({L1},1,20)="IRIS_MasterFederated")||($e({L1},1,14)="IRIS_Federated")) NEXT</NextCode>
</Subscript>
<Subscript name="2">
<Expression>{TableExact}</Expression>
<Invalidcondition name="1">
<Expression>'($d(^oddSQL({L1},{L2}))#2)</Expression>
</Invalidcondition>
<Invalidcondition name="2">
<Expression>'$$AnyPrivObj^%SYS.SQLSEC($li(^oddSQL({L1},{L2}),6))</Expression>
</Invalidcondition>
</Subscript>
<Type>data</Type>
</SQLMap>
<SQLMap name="rxIndex">
<Data name="SchemaExact">
<RetrievalCode>set {*}=$p($lg(^rINDEXSQL("rv",{L2},{L3}),4),".",1,*-1)</RetrievalCode>
</Data>
<Data name="TableExact">
<RetrievalCode>set {*}=$tr($p($lg(^rINDEXSQL("rv",{L2},{L3}),4),".",*),$c(2),".")</RetrievalCode>
</Data>
<Global>^rINDEXSQL</Global>
<PopulationType>full</PopulationType>
<Subscript name="1">
<Expression>"rv"</Expression>
</Subscript>
<Subscript name="2">
<Expression>$$UPPER({TABLE_SCHEMA})</Expression>
<Invalidcondition name="1">
<Expression>$e({L2},1,10)="IRIS_SHARD"||($e({L2},1,20)="IRIS_MASTERFEDERATED")||($e({L2},1,14)="IRIS_FEDERATED")</Expression>
</Invalidcondition>
<NextCode>set {L2} = $$GetNextSubscript^%SYS.SQLSEC("^rINDEXSQL(""rv"")", {L2}) quit:{L2}=""
	goto:($e({L2},1,10)="IRIS_SHARD"||($e({L2},1,20)="IRIS_MASTERFEDERATED")||($e({L2},1,14)="IRIS_FEDERATED")) NEXT</NextCode>
</Subscript>
<Subscript name="3">
<Expression>$$UPPER({TABLE_NAME})</Expression>
<Invalidcondition name="1">
<Expression>'$$AnyPrivObj^%SYS.SQLSEC($li(^rINDEXSQL("rv",{L2},{L3}),3)_","_$li(^rINDEXSQL("rv",{L2},{L3}),4))</Expression>
</Invalidcondition>
</Subscript>
<Type>index</Type>
</SQLMap>
<StreamLocation>^INFORMATION.SCHEMA.TABLESS</StreamLocation>
<Type>%Storage.SQL</Type>
}

}

